import { useEffect, useState } from 'react';
import { Card, FormField, Loader } from '../components';

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />);
  }

  return (
    <h2 className="mt-5 font-bold text-[#6469ff] text-xl uppercase">{title}</h2>
  );
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState([]);
  const [searchText, setSearchText] = useState('');
  const [searchedResults, setSearchedResults] = useState([]);

  const fetchPosts = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/v1/post', { method: 'GET' });

      if (response.ok) {
        const result = await response.json();
        setAllPosts(Array.isArray(result.data) ? result.data.reverse() : []);
      } else {
        const err = await response.text();
        console.error('Fetch posts failed:', response.status, err);
        alert('Failed to fetch posts');
      }
    } catch (err) {
      console.error('Error fetching posts:', err);
      alert('Error fetching posts');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPosts();
  }, []);

  const handleSearchChange = (e) => {
    const value = e.target.value;
    setSearchText(value);

    if (value === '') {
      setSearchedResults([]);
      return;
    }

    const filteredResults = allPosts.filter(
      (item) =>
        item.name.toLowerCase().includes(value.toLowerCase()) ||
        item.prompt.toLowerCase().includes(value.toLowerCase())
    );

    setSearchedResults(filteredResults);
  };

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="section-title">The Community Showcase</h1>
        <p className="section-subtitle max-w-[600px]">
          Browse imaginative and visually stunning images generated by AI.
        </p>
      </div>

      <div className="mt-16">
        <FormField
          labelName="Search posts"
          type="text"
          name="text"
          placeholder="Search something..."
          value={searchText}
          handleChange={handleSearchChange}
        />
      </div>

      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="font-medium text-[#666e75] text-xl mb-3">
                Showing results for <span className="text-[#222328]">{searchText}</span>:
              </h2>
            )}
            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              <RenderCards
                data={searchText ? searchedResults : allPosts}
                title={searchText ? 'No Search Results Found' : 'No Posts Yet'}
              />
            </div>
          </>
        )}
      </div>
    </section>
  );
};

export default Home;

